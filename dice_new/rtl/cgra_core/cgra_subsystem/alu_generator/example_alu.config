name: dice_alu

# number and bitwidths of inputs and outputs
inputs: 4
inputs_width: [32, 32, 32, 1]
outputs: 2
outputs_width: [32, 1]
register_mode: [0, 0]  # 0: combinational, 1: registered output

# ALU operations
ops:
  # --------------------------------------------------------------------------
  # Integer arithmetic (unsigned)
  - name: add_u32
    pipeline: 0
    opcode: 0
    c_impl: |
      out[0] = (in[0] + in[1]);

  - name: sub_u32
    pipeline: 0
    opcode: 1
    c_impl: |
      out[0] = (in[0] - in[1]);

  - name: mul_lo_u32
    pipeline: 0
    opcode: 2
    c_impl: |
      out[0] = (in[0] * in[1]);

  - name: mad_u32   # multiply-add (out = in0*in1 + in2)
    opcode: 3
    pipeline: 0
    c_impl: |
      out[0] = (in[0] * in[1]) + in[2];

  - name: div_u32
    opcode: 4
    pipeline: 2
    c_impl: |
      out[0] = (in[1] == 0) ? 0 : (in[0] / in[1]);

  - name: rem_u32
    opcode: 5
    pipeline: 2
    c_impl: |
      out[0] = (in[1] == 0) ? 0 : (in[0] % in[1]);

  # --------------------------------------------------------------------------
  # Integer arithmetic (signed)
  - name: add_s32
    opcode: 10
    c_impl: |
      out[0] = (uint64_t)((int32_t)in[0] + (int32_t)in[1]);

  - name: sub_s32
    opcode: 11
    c_impl: |
      out[0] = (uint64_t)((int32_t)in[0] - (int32_t)in[1]);

  - name: mul_lo_s32
    opcode: 12
    c_impl: |
      out[0] = (uint64_t)((int32_t)in[0] * (int32_t)in[1]);

  - name: div_s32
    opcode: 13
    c_impl: |
      int32_t a = (int32_t)in[0];
      int32_t b = (int32_t)in[1];
      out[0] = (b == 0) ? 0 : (uint64_t)(a / b);

  - name: rem_s32
    opcode: 14
    c_impl: |
      int32_t a = (int32_t)in[0];
      int32_t b = (int32_t)in[1];
      out[0] = (b == 0) ? 0 : (uint64_t)(a % b);

  # --------------------------------------------------------------------------
  # Bitwise / logical
  - name: and_b32
    opcode: 20
    c_impl: |
      out[0] = in[0] & in[1];

  - name: or_b32
    opcode: 21
    c_impl: |
      out[0] = in[0] | in[1];

  - name: xor_b32
    opcode: 22
    c_impl: |
      out[0] = in[0] ^ in[1];

  - name: not_b32
    opcode: 23
    c_impl: |
      out[0] = ~in[0];

  # --------------------------------------------------------------------------
  # Shifts
  - name: shl_b32
    opcode: 30
    c_impl: |
      out[0] = in[0] << (in[1] & 31);

  - name: shr_u32
    opcode: 31
    c_impl: |
      out[0] = in[0] >> (in[1] & 31);

  - name: shr_s32
    opcode: 32
    c_impl: |
      out[0] = (uint64_t)(((int32_t)in[0]) >> (in[1] & 31));

  # --------------------------------------------------------------------------
  # Min / max
  - name: min_u32
    opcode: 40
    c_impl: |
      out[0] = (in[0] < in[1]) ? in[0] : in[1];

  - name: max_u32
    opcode: 41
    c_impl: |
      out[0] = (in[0] > in[1]) ? in[0] : in[1];

  - name: min_s32
    opcode: 42
    c_impl: |
      int32_t a = (int32_t)in[0];
      int32_t b = (int32_t)in[1];
      out[0] = (uint64_t)((a < b) ? a : b);

  - name: max_s32
    opcode: 43
    c_impl: |
      int32_t a = (int32_t)in[0];
      int32_t b = (int32_t)in[1];
      out[0] = (uint64_t)((a > b) ? a : b);

  # --------------------------------------------------------------------------
  # Floating-point (single precision)
  - name: add_f32
    opcode: 200
    pipeline: 1
    c_impl: |
      float a = *((float*)&in[0]);
      float b = *((float*)&in[1]);
      float res = a + b;
      out[0] = *((uint32_t*)&res);

  - name: sub_f32
    opcode: 201
    pipeline: 1
    c_impl: |
      float a = *((float*)&in[0]);
      float b = *((float*)&in[1]);
      float res = a - b;
      out[0] = *((uint32_t*)&res);

  - name: mul_f32
    opcode: 202
    pipeline: 1
    c_impl: |
      float a = *((float*)&in[0]);
      float b = *((float*)&in[1]);
      float res = a * b;
      out[0] = *((uint32_t*)&res);

  - name: div_f32
    opcode: 203
    pipeline: 2
    c_impl: |
      float a = *((float*)&in[0]);
      float b = *((float*)&in[1]);
      float res = (b == 0.0f) ? 0.0f : (a / b);
      out[0] = *((uint32_t*)&res);

  - name: mad_f32
    opcode: 204
    pipeline: 2
    c_impl: |
      float a = *((float*)&in[0]);
      float b = *((float*)&in[1]);
      float c = *((float*)&in[2]);
      float res = (a * b) + c;
      out[0] = *((uint32_t*)&res);

  - name: min_f32
    opcode: 205
    pipeline: 1
    c_impl: |
      float a = *((float*)&in[0]);
      float b = *((float*)&in[1]);
      float res = (a < b) ? a : b;
      out[0] = *((uint32_t*)&res);

  - name: max_f32
    opcode: 206
    pipeline: 1
    c_impl: |
      float a = *((float*)&in[0]);
      float b = *((float*)&in[1]);
      float res = (a > b) ? a : b;
      out[0] = *((uint32_t*)&res);


  # --------------------------------------------------------------------------
  # Comparisons (set predicates)
  - name: set_eq_u32
    opcode: 50
    c_impl: |
      out[1] = (in[0] == in[1]) ? 1 : 0;

  - name: set_ne_u32
    opcode: 51
    c_impl: |
      out[1] = (in[0] != in[1]) ? 1 : 0;

  - name: set_lt_u32
    opcode: 52
    c_impl: |
      out[1] = (in[0] < in[1]) ? 1 : 0;

  - name: set_le_u32
    opcode: 53
    c_impl: |
      out[1] = (in[0] <= in[1]) ? 1 : 0;

  - name: set_gt_u32
    opcode: 54
    c_impl: |
      out[1] = (in[0] > in[1]) ? 1 : 0;

  - name: set_ge_u32
    opcode: 55
    c_impl: |
      out[1] = (in[0] >= in[1]) ? 1 : 0;

  - name: set_lt_s32
    opcode: 56
    c_impl: |
      out[1] = ((int32_t)in[0] < (int32_t)in[1]) ? 1 : 0;

  - name: set_gt_s32
    opcode: 57
    c_impl: |
      out[1] = ((int32_t)in[0] > (int32_t)in[1]) ? 1 : 0;

  # --------------------------------------------------------------------------
  # Select / mux (common in predicated execution)
  - name: sel
    opcode: 100
    c_impl: |
      out[0] = (in[3] ? in[0] : in[1]);


